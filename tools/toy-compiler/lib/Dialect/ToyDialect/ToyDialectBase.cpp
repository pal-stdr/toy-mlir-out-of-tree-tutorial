//===- ToyDialectBase.cpp - Toy IR Dialect registration in MLIR ------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file initialize the ToyDialect for the Toy IR & register the Toy ops
//
//===----------------------------------------------------------------------===//

/// 'ToyDialect' member in namespace 'mlir::toy' is coming from this header.
/// Actually, in "ToyDialectBase.h.inc", the "ToyDialect" class is created from "public ::mlir::Dialect" class.
/// And "ToyDialectBase.h" is calling "ToyDialectBase.h.inc" header
#include "Dialect/ToyDialect/ToyDialectBase.h"

// To-do: Later, here you have to include the header "ToyOps.h"
// Because we need "ToyOps.cpp.inc" to register to the "ToyDialect::initialize()"


using namespace mlir;
using namespace mlir::toy;



/// This ".cpp.inc" file is autogenerated by CMake function (in include/Dialect/ToyDialect/CMakeLists.txt)
/// using the flag "-gen-dialect-defs". Without this file, we cannot initialize the Dialect.
/// ToyDialectBase instance will be owned by the mlir::MLIRContext.
#include "Dialect/ToyDialect/ToyDialectBase.cpp.inc"




//===----------------------------------------------------------------------===//
// To-do: Call Ops header for registering Toy Ops (and types)
//===----------------------------------------------------------------------===//

/// To-do:
/// Call the Ops init configuration header which contains "ToyOps.h.inc" header call
/// Different Ops member declaration will be coming from this header.
/// This header should also contain the standard MLIR Interface lib calls like "BytecodeOpInterface.h", "CallInterfaces.h", etc.
/// After successful inclusion, you'd be able to register the Ops inside "ToyDialect::initialize()"








//===----------------------------------------------------------------------===//
// ToyDialect Initialize
//===----------------------------------------------------------------------===//

/// Dialect initialization. This is the point of registration of types
/// and operations for the dialect.
/// Now it is doing nothing, just sitting ducks.
void ToyDialect::initialize() {
    
    // "addOperations<>()" coming from "mlir/IR/Dialect.h"
    // "addOperations" is not '+' operations :). It's telling to add all operations
    addOperations<
        // To-do: Add autogenerated ToyOps declaration (i.e. ToyOps.cpp.inc)
    >();
}